#!/usr/bin/env python
import re

KEYWORD = 'KEYWORD'
SPECIAL_KEYWORD = 'SPECIAL_KEYWORD'
IDENTIFIER = 'IDENTIFIER'
MACRO = 'MACRO'
SYSTEM_TASK = 'SYSTEM_TASK'
CHAR = 'CHAR'
BLOCK_COMMENT_START = 'BLOCK_COMMENT_START'
BLOCK_COMMENT_END = 'BLOCK_COMMENT_END'
LINE_COMMENT = 'LINE_COMMENT'
BLOCK_COMMENT = 'BLOCK_COMMENT'
QUOTE = 'QUOTE'
ESCAPED_QUOTE = 'ESCAPED_QUOTE'
DEFINE = 'DEFINE'
EOS = 'EOS' # END OF STATEMENT
EOP = 'EOP' # END OF PARSERING
NUMBER='NUMBER'
PARAMETER_START='PARAMETER_START'
STRING = 'STRING'

QUOTE_TOKEN = (re.compile('"'), QUOTE)
BLOCK_COMMENT_END_TOKEN = (re.compile(re.escape('*/')), BLOCK_COMMENT_END)
BLOCK_COMMENT_START_TOKEN = (re.compile(re.escape('/*')), BLOCK_COMMENT_START)
ESCAPED_QUOTE_TOKEN = (re.compile(re.escape('\\"')), ESCAPED_QUOTE)

space_re = re.compile('\s+')
newline_re = re.compile('\n|\r')

PAIRED_BLOCK_COMMENT_TOKEN = (BLOCK_COMMENT_START_TOKEN, BLOCK_COMMENT_END_TOKEN)
PAIRED_QUOTE_TOKEN = (QUOTE_TOKEN, QUOTE_TOKEN)

REGEX_TOKENS = [
  (re.compile(r'[ \t\n]+'), None), # Skip spaces
  (re.compile(r'[0-9]*\'b[0-1_]+'), NUMBER), # BINARY
  (re.compile(r'[0-9]*\'h[0-9A-Fa-f_]+'), NUMBER), # HEX
  (re.compile(r'[0-9]*\'d[0-9_]+'), NUMBER), # DECIMAL
  (re.compile(r'[0-9][0-9_]*'), NUMBER),
  (re.compile(r'[A-Za-z0-9_]+'), IDENTIFIER),
  (re.compile(r'`[A-Za-z][A-Za-z0-9_]*'), MACRO),
  (re.compile(r'\$[A-Za-z][A-Za-z0-9_]*'), SYSTEM_TASK),

  # Tree charactors tokens
  (re.compile(re.escape('<<<=')), SPECIAL_KEYWORD),
  (re.compile(re.escape('>>>=')), SPECIAL_KEYWORD),
  (re.compile(re.escape('<<<')), SPECIAL_KEYWORD),
  (re.compile(re.escape('>>>')), SPECIAL_KEYWORD),
  (re.compile(re.escape('===')), SPECIAL_KEYWORD),
  (re.compile(re.escape('!==')), SPECIAL_KEYWORD),
  (re.compile(re.escape('==?')), SPECIAL_KEYWORD),
  (re.compile(re.escape('!=?')), SPECIAL_KEYWORD),
  (re.compile(re.escape('<<=')), SPECIAL_KEYWORD),
  (re.compile(re.escape('>>=')), SPECIAL_KEYWORD),

  # Two charactors tokens
  (re.compile(re.escape('::')), SPECIAL_KEYWORD),
  (re.compile(re.escape('~&')), SPECIAL_KEYWORD),
  (re.compile(re.escape('~|')), SPECIAL_KEYWORD),
  (re.compile(re.escape('~^')), SPECIAL_KEYWORD),
  (re.compile(re.escape('^~')), SPECIAL_KEYWORD),
  (re.compile(re.escape('++')), SPECIAL_KEYWORD),
  (re.compile(re.escape('--')), SPECIAL_KEYWORD),
  (re.compile(re.escape('**')), SPECIAL_KEYWORD),
  (re.compile(re.escape('<<')), SPECIAL_KEYWORD),
  (re.compile(re.escape('>>')), SPECIAL_KEYWORD),
  (re.compile(re.escape('<=')), SPECIAL_KEYWORD),
  (re.compile(re.escape('>=')), SPECIAL_KEYWORD),
  (re.compile(re.escape('==')), SPECIAL_KEYWORD),
  (re.compile(re.escape('!=')), SPECIAL_KEYWORD),
  (re.compile(re.escape('&&')), SPECIAL_KEYWORD),
  (re.compile(re.escape('||')), SPECIAL_KEYWORD),
  (re.compile(re.escape('?:')), SPECIAL_KEYWORD),
  (re.compile(re.escape('->')), SPECIAL_KEYWORD),
  (re.compile(re.escape('+=')), SPECIAL_KEYWORD),
  (re.compile(re.escape('-=')), SPECIAL_KEYWORD),
  (re.compile(re.escape('*=')), SPECIAL_KEYWORD),
  (re.compile(re.escape('/=')), SPECIAL_KEYWORD),
  (re.compile(re.escape('%=')), SPECIAL_KEYWORD),
  (re.compile(re.escape('&=')), SPECIAL_KEYWORD),
  (re.compile(re.escape('^=')), SPECIAL_KEYWORD),
  (re.compile(re.escape('|=')), SPECIAL_KEYWORD),
  (re.compile(re.escape(':=')), SPECIAL_KEYWORD),
  (re.compile(re.escape(':/')), SPECIAL_KEYWORD),
  (re.compile(re.escape('<=')), SPECIAL_KEYWORD),

  # (re.compile(re.escape('{{')), SPECIAL_KEYWORD), # TODO: Need to fix for default value of multidimention array.
                                                    # example `int abc[$][$] = '{{1,2}, {3,4}}`
                                                    # In above example instead of keyword `{`, keyword `{{` is considered
  # (re.compile(re.escape('}}')), SPECIAL_KEYWORD),

  (re.compile('#\s*\('), PARAMETER_START),
  (re.compile(re.escape('//')), LINE_COMMENT),
  BLOCK_COMMENT_START_TOKEN,
  BLOCK_COMMENT_END_TOKEN,

  # Single charactor tokens
  ESCAPED_QUOTE_TOKEN,
  QUOTE_TOKEN,
  (re.compile(re.escape('+')), SPECIAL_KEYWORD),
  (re.compile(re.escape('(')), SPECIAL_KEYWORD),
  (re.compile(re.escape(')')), SPECIAL_KEYWORD),
  (re.compile(re.escape('[')), SPECIAL_KEYWORD),
  (re.compile(re.escape(']')), SPECIAL_KEYWORD),
  (re.compile(re.escape('.')), SPECIAL_KEYWORD),
  (re.compile(re.escape('+')), SPECIAL_KEYWORD),
  (re.compile(re.escape('-')), SPECIAL_KEYWORD),
  (re.compile(re.escape('!')), SPECIAL_KEYWORD),
  (re.compile(re.escape('~')), SPECIAL_KEYWORD),
  (re.compile(re.escape('&')), SPECIAL_KEYWORD),
  (re.compile(re.escape('|')), SPECIAL_KEYWORD),
  (re.compile(re.escape('^')), SPECIAL_KEYWORD),
  (re.compile(re.escape('*')), SPECIAL_KEYWORD),
  (re.compile(re.escape('/')), SPECIAL_KEYWORD),
  (re.compile(re.escape('%')), SPECIAL_KEYWORD),
  (re.compile(re.escape('<')), SPECIAL_KEYWORD),
  (re.compile(re.escape('>')), SPECIAL_KEYWORD),
  (re.compile(re.escape('=')), SPECIAL_KEYWORD),
  (re.compile(re.escape('{')), SPECIAL_KEYWORD),
  (re.compile(re.escape('}')), SPECIAL_KEYWORD),
  (re.compile(re.escape(';')), EOS),

  # If don't match any of above pattern just match single char
  (re.compile(r'[^a-zA-Z0-9]'), SPECIAL_KEYWORD),
]

KEYWORD_TOKENS = [
  ('alias', KEYWORD),
  ('always', KEYWORD),
  ('always_comb', KEYWORD),
  ('always_ff', KEYWORD),
  ('always_latch', KEYWORD),
  ('and', KEYWORD),
  ('assert', KEYWORD),
  ('assign', KEYWORD),
  ('assume', KEYWORD),
  ('automatic', KEYWORD),
  ('before', KEYWORD),
  ('begin', KEYWORD),
  ('bind', KEYWORD),
  ('bins', KEYWORD),
  ('binsof', KEYWORD),
  ('bit', KEYWORD),
  ('break', KEYWORD),
  ('buf', KEYWORD),
  ('bufif0', KEYWORD),
  ('bufif1', KEYWORD),
  ('byte', KEYWORD),
  ('case', KEYWORD),
  ('casex', KEYWORD),
  ('casez', KEYWORD),
  ('cell', KEYWORD),
  ('chandle', KEYWORD),
  ('class', KEYWORD),
  ('clocking', KEYWORD),
  ('cmos', KEYWORD),
  ('config', KEYWORD),
  ('const', KEYWORD),
  ('constraint', KEYWORD),
  ('context', KEYWORD),
  ('continue', KEYWORD),
  ('cover', KEYWORD),
  ('covergroup', KEYWORD),
  ('coverpoint', KEYWORD),
  ('cross', KEYWORD),
  ('deassign', KEYWORD),
  ('default', KEYWORD),
  ('defparam', KEYWORD),
  ('design', KEYWORD),
  ('disable', KEYWORD),
  ('dist', KEYWORD),
  ('do', KEYWORD),
  ('edge', KEYWORD),
  ('else', KEYWORD),
  ('end', KEYWORD),
  ('endcase', KEYWORD),
  ('endclass', KEYWORD),
  ('endclocking', KEYWORD),
  ('endconfig', KEYWORD),
  ('endfunction', KEYWORD),
  ('endgenerate', KEYWORD),
  ('endgroup', KEYWORD),
  ('endinterface', KEYWORD),
  ('endmodule', KEYWORD),
  ('endpackage', KEYWORD),
  ('endprimitive', KEYWORD),
  ('endprogram', KEYWORD),
  ('endproperty', KEYWORD),
  ('endspecify', KEYWORD),
  ('endsequence', KEYWORD),
  ('endtable', KEYWORD),
  ('endtask', KEYWORD),
  ('enum', KEYWORD),
  ('event', KEYWORD),
  ('expect', KEYWORD),
  ('export', KEYWORD),
  ('extends', KEYWORD),
  ('extern', KEYWORD),
  ('final', KEYWORD),
  ('first_match', KEYWORD),
  ('for', KEYWORD),
  ('force', KEYWORD),
  ('foreach', KEYWORD),
  ('forever', KEYWORD),
  ('fork', KEYWORD),
  ('forkjoin', KEYWORD),
  ('function', KEYWORD),
  ('generate', KEYWORD),
  ('genvar', KEYWORD),
  ('highz0', KEYWORD),
  ('highz1', KEYWORD),
  ('if', KEYWORD),
  ('iff', KEYWORD),
  ('ifnone', KEYWORD),
  ('ignore_bins', KEYWORD),
  ('illegal_bins', KEYWORD),
  ('import', KEYWORD),
  ('incdir', KEYWORD),
  ('include', KEYWORD),
  ('initial', KEYWORD),
  ('inout', KEYWORD),
  ('input', KEYWORD),
  ('inside', KEYWORD),
  ('instance', KEYWORD),
  ('int', KEYWORD),
  ('integer', KEYWORD),
  ('interface', KEYWORD),
  ('intersect', KEYWORD),
  ('join', KEYWORD),
  ('join_any', KEYWORD),
  ('join_none', KEYWORD),
  ('large', KEYWORD),
  ('liblist', KEYWORD),
  ('library', KEYWORD),
  ('local', KEYWORD),
  ('localparam', KEYWORD),
  ('logic', KEYWORD),
  ('longint', KEYWORD),
  ('macromodule', KEYWORD),
  ('matches', KEYWORD),
  ('medium', KEYWORD),
  ('modport', KEYWORD),
  ('module', KEYWORD),
  ('nand', KEYWORD),
  ('negedge', KEYWORD),
  ('new', KEYWORD),
  ('nmos', KEYWORD),
  ('nor', KEYWORD),
  ('noshowcancelled', KEYWORD),
  ('not', KEYWORD),
  ('notif0', KEYWORD),
  ('notif1', KEYWORD),
  ('null', KEYWORD),
  ('or', KEYWORD),
  ('output', KEYWORD),
  ('package', KEYWORD),
  ('packed', KEYWORD),
  ('parameter', KEYWORD),
  ('pmos', KEYWORD),
  ('posedge', KEYWORD),
  ('primitive', KEYWORD),
  ('priority', KEYWORD),
  ('program', KEYWORD),
  ('property', KEYWORD),
  ('protected', KEYWORD),
  ('pull0', KEYWORD),
  ('pull1', KEYWORD),
  ('pulldown', KEYWORD),
  ('pullup', KEYWORD),
  ('pulsestyle_onevent', KEYWORD),
  ('pulsestyle_ondetect', KEYWORD),
  ('pure', KEYWORD),
  ('rand', KEYWORD),
  ('randc', KEYWORD),
  ('randcase', KEYWORD),
  ('randsequence', KEYWORD),
  ('rcmos', KEYWORD),
  ('real', KEYWORD),
  ('realtime', KEYWORD),
  ('ref', KEYWORD),
  ('reg', KEYWORD),
  ('release', KEYWORD),
  ('repeat', KEYWORD),
  ('return', KEYWORD),
  ('rnmos', KEYWORD),
  ('rpmos', KEYWORD),
  ('rtran', KEYWORD),
  ('rtranif0', KEYWORD),
  ('rtranif1', KEYWORD),
  ('scalared', KEYWORD),
  ('sequence', KEYWORD),
  ('shortint', KEYWORD),
  ('shortreal', KEYWORD),
  ('showcancelled', KEYWORD),
  ('signed', KEYWORD),
  ('small', KEYWORD),
  ('solve', KEYWORD),
  ('specify', KEYWORD),
  ('specparam', KEYWORD),
  ('static', KEYWORD),
  ('string', KEYWORD),
  ('strong0', KEYWORD),
  ('strong1', KEYWORD),
  ('struct', KEYWORD),
  ('super', KEYWORD),
  ('supply0', KEYWORD),
  ('supply1', KEYWORD),
  ('table', KEYWORD),
  ('tagged', KEYWORD),
  ('task', KEYWORD),
  ('this', KEYWORD),
  ('throughout', KEYWORD),
  ('time', KEYWORD),
  ('timeprecision', KEYWORD),
  ('timeunit', KEYWORD),
  ('tran', KEYWORD),
  ('tranif0', KEYWORD),
  ('tranif1', KEYWORD),
  ('tri', KEYWORD),
  ('tri0', KEYWORD),
  ('tri1', KEYWORD),
  ('triand', KEYWORD),
  ('trior', KEYWORD),
  ('trireg', KEYWORD),
  ('type', KEYWORD),
  ('typedef', KEYWORD),
  ('union', KEYWORD),
  ('unique', KEYWORD),
  ('unsigned', KEYWORD),
  ('use', KEYWORD),
  ('uwire', KEYWORD),
  ('var', KEYWORD),
  ('vectored', KEYWORD),
  ('virtual', KEYWORD),
  ('void', KEYWORD),
  ('wait', KEYWORD),
  ('wait_order', KEYWORD),
  ('wand', KEYWORD),
  ('weak0', KEYWORD),
  ('weak1', KEYWORD),
  ('while', KEYWORD),
  ('wildcard', KEYWORD),
  ('wire', KEYWORD),
  ('with', KEYWORD),
  ('within', KEYWORD),
  ('wor', KEYWORD),
  ('xnor', KEYWORD),
  ('xor', KEYWORD),
  ('process', KEYWORD),
]

INDENT = 0

DATATYPE_KEYWORDS = [
  'type',
  'bit',
  'event',
  'byte',
  'shortint',
  'int',
  'longint',
  'reg',
  'logic',
  'wire',
  'integer',
  'time',
  'shortreal',
  'real',
  'realtime',
  'enum',
  'struct',
  'union',
  'string',
  'unsigned',
  'process',
  'mailbox'
]


